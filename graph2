#节点类，此类用来存储每个点的数据，包括这个点连接了哪条边权重多少等
class Vertex:
    def __init__(self,id):
        #点的ID
        self.id=id
        #点的连接信息
        self.connect_to={}

    #添加连接，一开始默认权重是0，所以连接时要设置一下权重
    def add_neighbor(self,nbr_id,weight=0):
        self.connect_to[nbr_id]=weight

    #获取这个点所连接的点的所有数据
    def get_connections(self):
        return self.connect_to.keys()

    #放回此点的id号
    def get_id(self):
        return self.id

    #获取连接某个点的权重
    def get_weight(self,nbr_id):
        return self.connect_to[nbr_id]

    def __str__(self):
        return f"点{self.id}"

#图类，上面的类只是用来存储一个点的数据的，那么下面这个类则是存储图中所有点的数据的
class Graph:
    def __init__(self):
        #存储的主体，用字典来存储
        self.vert_list={}
        #用于表示图中有多少点
        self.num_vertices=0

    #添加点
    def add_vertex(self,id):
        #图中点的数量加一
        self.num_vertices+=1
        #新建一个点类
        new_vert=Vertex(id)
        #将点类添加到图中
        self.vert_list[id]=new_vert
        return new_vert

    #获取某个点的数据
    def get_vertex(self,id):
        #设置一个判断语句，若输入的ID确实存在则返回，否则返回none
        if id in self.vert_list:
            return self.vert_list[id]
        else:
            return None

    #添加边，此函数的from_代表连接的点类，to表示被连接的点类，weight表示这条边的权重
    def add_edge(self,from_,to,weight=0):
        #首先需要判断from_与to两个点是否存在，若不存在则创建
        if from_ not in self.vert_list:
            new_vertex=self.add_vertex(from_)
        if to not in self.vert_list:
            new_vertex=self.add_vertex(to)
        #调用点类的add_neighbor方法来进行添加
        self.vert_list[from_].add_neighbor(self.vert_list[to],weight)

    def get_all_vertices(self):
        #返回所有节点的信息
        return self.vert_list.keys()

    def __contains__(self,id):
        return id in self.vert_list

    #此函数是用来迭代的，若不设置的话图对象无法直接迭代
    def __iter__(self):
        return iter(self.vert_list.values())

    def __str__(self):
        return "图类"

if __name__=="__main__":
    #创建图类
    g=Graph()
    #打印图类 这里用到了__str__函数
    print(g)
    #迭代添加节点
    for i in range(6):
        g.add_vertex(i)
    #查看是否添加成功
    print(g.get_all_vertices())
    #添加边
    g.add_edge(0,1,1)
    g.add_edge(0,2,1)
    g.add_edge(1,3,1)
    #查看0节点连接的对象 对象是类所以返回地址
    print(g.vert_list[0].get_connections())
    #遍历图里面的点数据
    for v in g:
        print('v=',v)
        for w in v.get_connections():
            #print('w=',w)
            print("({},{})".format(v.get_id(),w.get_id()))
